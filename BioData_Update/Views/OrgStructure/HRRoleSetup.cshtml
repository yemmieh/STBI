@model BioData_Update.Models.AppraisalApproverModel

@{
    ViewBag.Title = "HR Role Setup";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h4>@ViewBag.Title</h4>

<hr />

<div class="stf_optionsContainer">
    <div class="row">
        <div class="col-md-12">

            <section id="form">
                @using (Html.BeginForm("HRRoleSetup", "OrgStructure", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data", id = "setupform" }))
                {

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @Html.HiddenFor(m => m.HRStaffName, new { Value = @User.Identity.Name, id = "HRStaffName" })
                    @Html.HiddenFor(m => m.HRStaffNumber, new { id = "HRStaffNumber" })
                    @Html.HiddenFor(m => m.RoleTitle, new { id = "RoleTitle" })
                    @Html.HiddenFor(m => m.StatusTitle, new { id = "StatusTitle" })
                    @Html.HiddenFor(m => m.EntryKey, new { id = "EntryKey" })

                    <div class="form-group col-md-12">
                        <div class="form-group col-md-2 ">
                            @Html.LabelFor(m => m.StaffNumber, new { @class = "control-label" })
                            <div>
                                @Html.TextBoxFor(m => m.StaffNumber, new { @class = "form-control small-textbox", onblur = "getStaffProfile(this.value)", type = "text", id = "in_StaffNumber" })
                                @Html.ValidationMessageFor(m => m.StaffNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-3">
                            @Html.LabelFor(m => m.StaffName, new { @class = "control-label" })
                            <div>
                                @Html.TextBoxFor(m => m.StaffName, new { @class = "form-control", @readonly = "readonly", type = "text", id = "in_StaffName" })
                                @Html.ValidationMessageFor(m => m.StaffName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-3">
                            @Html.LabelFor(m => m.RoleID, new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(m => m.RoleID, Model.Role, "--- Select User Role ---", new { @class = "form-control", id = "RoleID", onchange = "setRole(this.id)" })
                                @Html.ValidationMessageFor(m => m.RoleID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-3">
                            @Html.LabelFor(m => m.StatusCode, new { @class = "control-label" })
                            <div>
                                @Html.DropDownListFor(m => m.StatusCode, Model.StatusName, "--- Select User Status ---", new { @class = "form-control", id = "StatusCode", onchange = "setStatus(this.id)" })
                                @Html.ValidationMessageFor(m => m.StatusCode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-12">
                        <div class="">
                            <span class='web-err'>@ViewBag.ErrorMessage</span>
                        </div>
                    </div>

                    <div class="form-group col-md-12">
                        <div class="">
                            <input type="submit" value="Setup User" class="btn btn-default" />
                        </div>
                    </div>
                }
            </section>
        </div>
    </div>
    <script type="text/javascript">
        function setRole(rolename) {
            $("#RoleTitle").val($("#" + rolename + " option:selected").text());
        };
        function setStatus(statusname) {
            $("#StatusTitle").val($("#" + statusname + " option:selected").text());
        };

        //validate the new staff number
        //getStaffProfile('20071488')
        function getStaffProfile(staffnumber) {
            //alert()
            //    alert(staffnumber)
            var StaffNumber = "";
            var StaffName = "";
            var StaffGrade = "";

            $.ajax({
                type: "POST",
                //url: "../HRSetup/GetStaffProfile",
                url: '@Url.Action("GetStaffProfile", "HRSetup")',
                traditional: true,
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify({ StaffNumber: staffnumber }),
                success: function (data) {
                    //console.log(data)
                    var StaffName = "";

                    if (data[0] == undefined || data[0] == null) {
                        StaffName = data.name;
                        StaffNumber = data.employee_number;
                        StaffGrade = data.grade_code;

                        $("#in_StaffName").val("");
                        $("#in_StaffNumber").val("");
                        $("#in_StaffGrade").val("");

                        $(".web-err").html(StaffNumber + "_" + StaffName);

                    } else {
                        StaffName = data[0].name;
                        StaffNumber = data[0].employee_number;
                        StaffGrade = data[0].grade_code;

                        $("#in_StaffName").val(StaffName);
                        $("#in_StaffNumber").val(StaffNumber);
                        $("#in_StaffGrade").val(StaffGrade);

                        $(".web-err").html("");
                    }

                }, error: function (data) {
                    //console.log(data)
                }
            });
        }
        function addCommas(str) {
            return (str + "").replace(/\b(\d+)((\.\d+)*)\b/g, function (a, b, c) {
                return (b.charAt(0) > 0 && !(c || ".").lastIndexOf(".") ? b.replace(/(\d)(?=(\d{3})+$)/g, "$1,") : b) + c;
            });
        }
        function roundNumber(number) {
            var newnumber = new Number(number + '').toFixed(parseInt(2));
            return new String(parseFloat(newnumber));
        }
        function removeCommas(e) {
            if (!e || e == "") { return false; }
            while (e.indexOf(",") > -1) { e = e.replace(",", ""); }
            return e;
        }
    </script>

</div>